/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package cl.springboot.test_avro.jetty.domain;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"cl.springboot.test_avro.jetty.domain\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"soccerTeam\",\"type\":\"string\"},{\"name\":\"weight\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence nickname;
  @Deprecated public java.lang.CharSequence soccerTeam;
  @Deprecated public double weight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.Integer id, java.lang.CharSequence nickname, java.lang.CharSequence soccerTeam, java.lang.Double weight) {
    this.id = id;
    this.nickname = nickname;
    this.soccerTeam = soccerTeam;
    this.weight = weight;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return nickname;
    case 2: return soccerTeam;
    case 3: return weight;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: nickname = (java.lang.CharSequence)value$; break;
    case 2: soccerTeam = (java.lang.CharSequence)value$; break;
    case 3: weight = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'nickname' field.
   */
  public java.lang.CharSequence getNickname() {
    return nickname;
  }

  /**
   * Sets the value of the 'nickname' field.
   * @param value the value to set.
   */
  public void setNickname(java.lang.CharSequence value) {
    this.nickname = value;
  }

  /**
   * Gets the value of the 'soccerTeam' field.
   */
  public java.lang.CharSequence getSoccerTeam() {
    return soccerTeam;
  }

  /**
   * Sets the value of the 'soccerTeam' field.
   * @param value the value to set.
   */
  public void setSoccerTeam(java.lang.CharSequence value) {
    this.soccerTeam = value;
  }

  /**
   * Gets the value of the 'weight' field.
   */
  public java.lang.Double getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Double value) {
    this.weight = value;
  }

  /** Creates a new User RecordBuilder */
  public static cl.springboot.test_avro.jetty.domain.User.Builder newBuilder() {
    return new cl.springboot.test_avro.jetty.domain.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static cl.springboot.test_avro.jetty.domain.User.Builder newBuilder(cl.springboot.test_avro.jetty.domain.User.Builder other) {
    return new cl.springboot.test_avro.jetty.domain.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static cl.springboot.test_avro.jetty.domain.User.Builder newBuilder(cl.springboot.test_avro.jetty.domain.User other) {
    return new cl.springboot.test_avro.jetty.domain.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private int id;
    private java.lang.CharSequence nickname;
    private java.lang.CharSequence soccerTeam;
    private double weight;

    /** Creates a new Builder */
    private Builder() {
      super(cl.springboot.test_avro.jetty.domain.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(cl.springboot.test_avro.jetty.domain.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nickname)) {
        this.nickname = data().deepCopy(fields()[1].schema(), other.nickname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.soccerTeam)) {
        this.soccerTeam = data().deepCopy(fields()[2].schema(), other.soccerTeam);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.weight)) {
        this.weight = data().deepCopy(fields()[3].schema(), other.weight);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(cl.springboot.test_avro.jetty.domain.User other) {
            super(cl.springboot.test_avro.jetty.domain.User.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nickname)) {
        this.nickname = data().deepCopy(fields()[1].schema(), other.nickname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.soccerTeam)) {
        this.soccerTeam = data().deepCopy(fields()[2].schema(), other.soccerTeam);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.weight)) {
        this.weight = data().deepCopy(fields()[3].schema(), other.weight);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nickname' field */
    public java.lang.CharSequence getNickname() {
      return nickname;
    }
    
    /** Sets the value of the 'nickname' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder setNickname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nickname = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nickname' field has been set */
    public boolean hasNickname() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nickname' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder clearNickname() {
      nickname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'soccerTeam' field */
    public java.lang.CharSequence getSoccerTeam() {
      return soccerTeam;
    }
    
    /** Sets the value of the 'soccerTeam' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder setSoccerTeam(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.soccerTeam = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'soccerTeam' field has been set */
    public boolean hasSoccerTeam() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'soccerTeam' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder clearSoccerTeam() {
      soccerTeam = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Double getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder setWeight(double value) {
      validate(fields()[3], value);
      this.weight = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'weight' field */
    public cl.springboot.test_avro.jetty.domain.User.Builder clearWeight() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.nickname = fieldSetFlags()[1] ? this.nickname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.soccerTeam = fieldSetFlags()[2] ? this.soccerTeam : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.weight = fieldSetFlags()[3] ? this.weight : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
